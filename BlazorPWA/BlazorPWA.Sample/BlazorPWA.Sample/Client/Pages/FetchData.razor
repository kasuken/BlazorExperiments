@page "/fetchdata"
@using BlazorPWA.Sample.Shared
@inject HttpClient Http

@inject Blazored.LocalStorage.ILocalStorageService ls

@inject IJSRuntime jsr

<h1>Weather forecast</h1>

<h2>You are <b>@onlineStatus</b></h2>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private WindowNavigator biNavigator;

    private string onlineStatus = "Online";

    private bool onLine = true;

    protected override async Task OnInitializedAsync()
    {
        //try
        //{
        //    onlineStatus = "Online";

        //    forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        //    await ls.SetItemAsync<WeatherForecast[]>("forecasts", forecasts);
        //}
        //catch (Exception)
        //{
        //    onlineStatus = "Offline";

        //    forecasts = await ls.GetItemAsync<WeatherForecast[]>("forecasts");
        //}
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            WindowInterop biWindow = await jsr.Window();
            WindowNavigator biNavigator = await biWindow.Navigator();
            await biNavigator.Connection.OnChange(async () =>
              OnConnectionStateChanged(biNavigator.Online));

            OnConnectionStateChanged(biNavigator.Online);
        }
    }

    protected async void OnConnectionStateChanged(bool onlineState)
    {
        if (onLine == onlineState && onlineState)
        {
            onlineStatus = "Online";

            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

            StateHasChanged();
        }
        if (onLine != onlineState && !onlineState)
        {
            onlineStatus = "Offline";

            forecasts = await ls.GetItemAsync<WeatherForecast[]>("forecasts");

            StateHasChanged();
        }

        onLine = onlineState;
    }
}